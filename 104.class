/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        
        if(root == null) return 0;  
        
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);

        return Math.max(leftDepth, rightDepth) + 1;

        /* 노드의 왼쪽 서브트리, 오른쪽 서브트리 깊이 중 큰 것을 선택하고 되돌아오면서 1 더해줌.
        
        TestCase
        1. 3의 왼쪽 서브트리 깊이 = 0 + 1 (9의 깊이 : 0 + 9에서 3으로 오는 깊이 : 1)
        2. 3의 오른쪽 서브트리 20의 깊이 = 왼쪽 : 1 (노드15), 오른쪽 : 1 (노드7)
        3. 둘다 1 이므로 1을 선택하고 +1 한다. (15, 7 노드 -> 20노드로 되돌아오면 깊이 1증가)
        4. 3의 왼쪽 깊이 1, 오른쪽 서브트리 20의 깊이 2 이므로 2 선택 후 + 1 (20->3 되돌아옴)
        */

    }
}

// https://leetcode.com/problems/maximum-depth-of-binary-tree/